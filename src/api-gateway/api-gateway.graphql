# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ArticleResponse {
  contentHTML: String!
  id: String!
  published: Boolean!
  title: String!
  date: String!
  references: [String!]!
  abstract: String!
  language: String!
  filename: String!
}

type Contact {
  _id: String!
  emails: [String!]
  name: String
  avatarUrl: String
  address: String
  bornAt: DateTime
  bornAddress: String
  knownAt: DateTime
  knownSource: String
  extraversionIntroversion: String
  intuitingSensing: String
  thinkingFeeling: String
  planingPerceiving: String
  tdp: String
  inboundTrust: Float
  outboundTrust: Float
  blurb: String
  workingOn: String
  desire: String
  title: String
  experience: [Experience!]!
  education: [Experience!]!
  linkedin: String
  facebook: String
  createAt: DateTime
  updateAt: DateTime
}

input CreateContactInput {
  _id: String
  emails: [String!]
  name: String
  avatarUrl: String
  address: String
  bornAt: String
  bornAddress: String
  knownAt: DateTime
  knownSource: String
  extraversionIntroversion: String
  intuitingSensing: String
  thinkingFeeling: String
  planingPerceiving: String
  tdp: String
  inboundTrust: Float
  outboundTrust: Float
  blurb: String
  workingOn: String
  desire: String
  title: String
  experience: [ExperienceInput!]!
  education: [ExperienceInput!]!
  linkedin: String
  facebook: String
  createAt: DateTime
  updateAt: DateTime
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Experience {
  title: String
  name: String
}

input ExperienceInput {
  title: String
  name: String
}

type Interaction {
  id: String!
  timestamp: DateTime!
  content: String!
  contentHtml: String
  relatedHumans: [String!]!
}

type Mutation {
  createContact(createContactInput: CreateContactInput!): Contact!
  updateContact(updateContactInput: UpdateContactInput!): Contact!
  upsertInteraction(upsertInteraction: UpsertInteraction!): Interaction!
}

type Query {
  # get the article
  articles(id: String): [ArticleResponse!]
  interactions(
    contactId: String
    isSelf: Boolean
    offset: Float
    limit: Float
  ): [Interaction!]!
  search(name: String!): [SearchResult!]!
  contacts(id: String!): [Contact!]
  contact(id: String, userId: String): Contact

  # is the server healthy?
  health: String!
}

type SearchResult {
  name: String!
  path: String!
}

input UpdateContactInput {
  _id: String!
  emails: [String!]
  name: String
  avatarUrl: String
  address: String
  bornAt: DateTime
  bornAddress: String
  knownAt: DateTime
  knownSource: String
  extraversionIntroversion: String
  intuitingSensing: String
  thinkingFeeling: String
  planingPerceiving: String
  tdp: String
  inboundTrust: Float
  outboundTrust: Float
  blurb: String
  workingOn: String
  desire: String
  title: String
  experience: [ExperienceInput!]!
  education: [ExperienceInput!]!
  linkedin: String
  facebook: String
  createAt: DateTime
  updateAt: DateTime
}

input UpsertInteraction {
  id: String!
  timestamp: DateTime!
  content: String!
  relatedHumans: [String!]!
}
